// This file is automatically generated, do not modify!
/*
    GPT - Grid Python Toolkit
    Copyright (C) 2020  Christoph Lehner (christoph.lehner@ur.de, https://github.com/lehner/gpt)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#include "../lib.h"

#include "../expression/mul.h"

template<>
cgpt_Lattice_base* cgpt_lattice_gammamul(cgpt_Lattice_base* dst, bool ac, int unary_a, Lattice< iSinglet<vComplexF> >& la, Gamma::Algebra gamma, int unary_expr, bool rev, ComplexD coef) {
  ERR("Not implemented");
}

template<>
cgpt_Lattice_base* cgpt_lattice_matmul(cgpt_Lattice_base* dst, bool ac, int unary_a, Lattice< iSinglet<vComplexF> >& la, PyArrayObject* b, std::string& bot, int unary_b, int unary_expr, bool rev, ComplexD coef) {
  typedef vComplexF vtype;
  if (unary_b == 0) {
#define COLOR(Nc)				\
    _MM_COMPATIBLE_RL_(iVColor ## Nc);		\
    _MM_COMPATIBLE_RL_(iMColor ## Nc);
#define SPIN(Ns)				\
    _MM_COMPATIBLE_RL_(iVSpin ## Ns);		\
    _MM_COMPATIBLE_RL_(iMSpin ## Ns);
#define SPIN_COLOR(Ns,Nc)				\
    _MM_COMPATIBLE_RL_(iVSpin ## Ns ## Color ## Nc);	\
    _MM_COMPATIBLE_RL_(iMSpin ## Ns ## Color ## Nc);
#include "../spin_color.h"
#undef COLOR
#undef SPIN
#undef SPIN_COLOR
#define BASIS_SIZE(n) \
    _MM_COMPATIBLE_RL_(iVSinglet ## n); \
    _MM_COMPATIBLE_RL_(iMSinglet ## n);
#include "../basis_size.h"
#undef BASIS_SIZE
  }
  ERR("Not implemented");
}

template<>
cgpt_Lattice_base* cgpt_lattice_mul(cgpt_Lattice_base* dst, bool ac, int unary_a, Lattice< iSinglet<vComplexF> >& la,int unary_b, cgpt_Lattice_base* b, int unary_expr, ComplexD coef) {
  typedef vComplexF vtype;
  _COMPATIBLE_(iSinglet);
  // in all other cases reverse multiplication order
  ERR("Not implemented");
}
